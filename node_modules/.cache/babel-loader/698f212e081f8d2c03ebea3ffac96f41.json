{"ast":null,"code":"import _objectSpread from \"/Users/antoineroy/Documents/tictactoe/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/antoineroy/Documents/tictactoe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoineroy/Documents/tictactoe/src/App.js\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport Players from \"./components/Players\";\nimport Winner from \"./components/Winner\";\nimport RestartButton from \"./components/RestartButton\";\n\nfunction Game() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      turnRed = _useState2[0],\n      setTurnRed = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      turnCount = _useState4[0],\n      setTurnCount = _useState4[1];\n\n  var _useState5 = useState({\n    playerOne: \"Player 1\",\n    playerTwo: \"Player 2\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      players = _useState6[0],\n      setPlayers = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      winner = _useState8[0],\n      setWinner = _useState8[1];\n\n  var _useState9 = useState({\n    playerOne: 0,\n    playerTwo: 0\n  }),\n      _useState10 = _slicedToArray(_useState9, 2),\n      scores = _useState10[0],\n      setScores = _useState10[1];\n\n  var _useState11 = useState([Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null)]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      board = _useState12[0],\n      setBoard = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      nameAreSet = _useState14[0],\n      setNameAreSet = _useState14[1];\n\n  function startNewRound() {\n    console.log(\"New Round Started\");\n    setWinner(null);\n    var newBoard = [Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null)];\n    setBoard(newBoard);\n    setTurnCount(0);\n  } //Board related Functions\n\n\n  function handleColumnClick(id) {\n    console.log(\"TURNCOUNT------\" + turnCount);\n\n    if (winner === null) {\n      if (turnRed === true) {\n        var nextBoard = board.slice();\n        var index = nextBoard[id].indexOf(null);\n\n        if (~index) {\n          nextBoard[id][index] = \"R\";\n          var oldTurnCount = turnCount;\n          setTurnCount(oldTurnCount + 1);\n        }\n\n        setTurnRed(!turnRed);\n        setBoard(nextBoard);\n      } else {\n        var _nextBoard = board.slice();\n\n        var _index = _nextBoard[id].indexOf(null);\n\n        if (~_index) {\n          _nextBoard[id][_index] = \"Y\";\n          var _oldTurnCount = turnCount;\n          setTurnCount(_oldTurnCount + 1);\n        }\n\n        setTurnRed(!turnRed);\n        setBoard(_nextBoard);\n      }\n    }\n\n    return;\n  }\n\n  function findADraw() {\n    if (turnCount > 41 && winner === null) {\n      setWinner(\"This is a Draw nobody\");\n      console.log(\"This is a Draw nobody\");\n\n      var newScores = _objectSpread({}, scores);\n\n      newScores.playerTwo += 1;\n      newScores.playerOne += 1;\n      setScores(newScores);\n    }\n  }\n\n  function findFourInARow(arr) {\n    arr.forEach(function (arrInArr) {\n      for (var i = 0; i < arrInArr.length - 3; i++) {\n        var a = i;\n        var b = i + 1;\n        var c = i + 2;\n        var d = i + 3;\n\n        if (arrInArr[a] && arrInArr[a] === arrInArr[b] && arrInArr[a] === arrInArr[c] && arrInArr[a] === arrInArr[d]) {\n          if (arrInArr[a] === \"R\") {\n            setWinner(players.playerOne);\n            setScores(scores.playerOne + 1);\n\n            var newScores = _objectSpread({}, scores);\n\n            newScores.playerOne += 1;\n            setScores(newScores);\n          } else if (arrInArr[a] === \"Y\") {\n            setWinner(players.playerTwo);\n\n            var _newScores = _objectSpread({}, scores);\n\n            _newScores.playerTwo += 1;\n            setScores(_newScores);\n          } else {\n            return;\n          }\n        }\n      }\n    });\n  } //Winner related functions\n\n\n  function calculateWinner() {\n    if (winner === null) {\n      findFourInARow(board);\n      findFourInARow(rows);\n      findFourInARow(diags);\n      findADraw();\n    }\n  }\n\n  function handlePlayerSubmit(e) {\n    e.preventDefault();\n    setNameAreSet(true);\n  }\n\n  function handlePlayerChange(e) {\n    e.preventDefault();\n\n    var newPlayers = _objectSpread({}, players);\n\n    e.target.name === \"PlayerOne\" ? newPlayers = _objectSpread({}, players, {\n      playerOne: e.target.value\n    }) : newPlayers = _objectSpread({}, players, {\n      playerTwo: e.target.value\n    });\n    console.log(newPlayers);\n    setPlayers(_objectSpread({}, newPlayers));\n  }\n\n  function renderWinner(theWinner, onClickFunct) {\n    if (theWinner != null) {\n      return React.createElement(\"div\", {\n        className: \"winner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, theWinner, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }), \"wins !\"), React.createElement(RestartButton, {\n        onClick: onClickFunct,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      })));\n    } else {\n      return null;\n    }\n  }\n\n  var rows = [[board[0][0], board[1][0], board[2][0], board[3][0], board[4][0], board[5][0], board[6][0]], [board[0][1], board[1][1], board[2][1], board[3][1], board[4][1], board[5][1], board[6][1]], [board[0][2], board[1][2], board[2][2], board[3][2], board[4][2], board[5][2], board[6][2]], [board[0][3], board[1][3], board[2][3], board[3][3], board[4][3], board[5][3], board[6][3]], [board[0][4], board[1][4], board[2][4], board[3][4], board[4][4], board[5][4], board[6][4]], [board[0][5], board[1][5], board[2][5], board[3][5], board[4][5], board[5][5], board[6][5]]];\n  var diags = [[board[0][3], board[1][2], board[2][1], board[3][0]], [board[0][4], board[1][3], board[2][2], board[3][1], board[4][0]], [board[0][5], board[1][4], board[2][3], board[3][2], board[4][1], board[5][0]], [board[1][5], board[2][4], board[3][3], board[4][2], board[5][1], board[6][0]], [board[2][5], board[3][4], board[4][3], board[5][2], board[6][1]], [board[3][5], board[4][4], board[5][3], board[6][2]], [board[0][2], board[1][3], board[2][4], board[3][5]], [board[0][1], board[1][2], board[2][3], board[3][4], board[4][5]], [board[0][0], board[1][1], board[2][2], board[3][3], board[4][4], board[5][5]], [board[1][0], board[2][1], board[3][2], board[4][3], board[5][4], board[6][5]], [board[2][0], board[3][1], board[4][2], board[5][3], board[6][4]], [board[3][0], board[4][1], board[5][2], board[6][3]]];\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258\n    },\n    __self: this\n  }, React.createElement(Players, {\n    players: players,\n    handlePlayerChange: handlePlayerChange,\n    handlePlayerSubmit: handlePlayerSubmit,\n    scores: scores,\n    nameAreSet: nameAreSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259\n    },\n    __self: this\n  })), React.createElement(Winner, {\n    players: players,\n    renderWinner: renderWinner,\n    winner: winner,\n    restart: startNewRound,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, React.createElement(Board, {\n    board: board,\n    handleColumnClick: handleColumnClick,\n    calculateWinner: calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  })));\n}\n\nexport default Game;\n/*function Game() {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [historySquares, setHistorySquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n  const [history, setHistory] = useState([]);\n\n  function renderSquare(i) {\n    return <Square value={arrInArr[i]} onClick={handleClick} />;\n    function handleClick() {\n      if (winner === null) {\n        const nextSquares = arrInArr.slice();\n        if (nextSquares[i] === null) {\n          nextSquares[i] = OisNext ? \"X\" : \"O\";\n        } else {\n          return;\n        }\n        setSquares(nextSquares);\n        setOisNext(!OisNext);\n        console.log(arrInArr);\n      } else {\n        return;\n      }\n    }\n  }\n\n  function renderHistorySquare(x) {\n    return <historySquare value={historySquares[x]} />;\n  }\n\n  useEffect(() => {\n    function calculateWinner(arrInArr) {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (\n          arrInArr[a] &&\n          arrInArr[a] === arrInArr[b] &&\n          arrInArr[a] === arrInArr[c]\n        ) {\n          console.log(\"WINNER!\");\n          setWinner(arrInArr[a]);\n        }\n      }\n      console.log(\"NO WINNER\");\n      return;\n    }\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      let nextHistory = history.slice();\n      nextHistory.push([arrInArr]);\n      setHistory(nextHistory);\n      console.log(\"HISTORY IN CW \" + history);\n\n      console.log(\"HISTORY\" + history.length + history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n    return console.log(\"useffect calculate winner unmount\");\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          arrInArr={arrInArr}\n          setSquares={setSquares}\n          historySquares={historySquares}\n          setHistorySquares={setHistorySquares}\n          OisNext={OisNext}\n          setOisNext={setOisNext}\n          winner={winner}\n          setWinner={setWinner}\n          scores={scores}\n          setScores={setScores}\n          history={history}\n          setHistory={setHistory}\n          renderSquare={renderSquare}\n        />\n      </div>\n      <div className=\"history-board\">\n        <HistoryBoard\n          historySquares={historySquares}\n          winner={winner}\n          history={history}\n          renderHistorySquare={renderHistorySquare}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\nfunction createHistory(history){\n  for (let i = 0; i < history.length; i++) {\n    <div id={i}>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][0])}\n        {props.renderHistorySquare(props.history[i][1])}\n        {props.renderHistorySquare(props.history[i][2])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][3])}\n        {props.renderHistorySquare(props.history[i][4])}\n        {props.renderHistorySquare(props.history[i][5])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][6])}\n        {props.renderHistorySquare(props.history[i][7])}\n        {props.renderHistorySquare(props.history[i][8])}\n      </div>\n    </div>\n\n  }\n}\nfunction HistoryBoard(props) {\n  if (props.history.length === 0) {\n    return <div>History</div>;\n  } else {\n    console.log(\"my history \" + props.history[0]);\n    return(\n    );\n  }\n}\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\nfunction historySquare(value) {\n  return <button className=\"square\">{value}</button>;\n}\n\nfunction Board(props) {\n  function declareTurn() {\n    return props.OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {props.scores[0]} - O : {props.scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {props.renderSquare(0)}\n          {props.renderSquare(1)}\n          {props.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(3)}\n          {props.renderSquare(4)}\n          {props.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(6)}\n          {props.renderSquare(7)}\n          {props.renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n\n/*import React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={arrInArr[i]}\n        onClick={() => {\n          if (winner === null) {\n            const nextSquares = arrInArr.slice();\n            if (nextSquares[i] === null) {\n              nextSquares[i] = OisNext ? \"X\" : \"O\";\n            } else {\n              return;\n            }\n            setSquares(nextSquares);\n            setOisNext(!OisNext);\n            console.log(arrInArr);\n          } else {\n            return;\n          }\n        }}\n      />\n    );\n  }\n  function calculateWinner(arrInArr) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        arrInArr[a] &&\n        arrInArr[a] === arrInArr[b] &&\n        arrInArr[a] === arrInArr[c]\n      ) {\n        console.log(\"WINNER!\");\n        setWinner(arrInArr[a]);\n      }\n    }\n    console.log(\"NO WINNER\");\n    return;\n  }\n\n  function declareTurn() {\n    return OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n  useEffect(() => {\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      if (props.history.length === 0) {\n        props.setHistory(arrInArr);\n      } else {\n        props.setHistory(props.history + arrInArr);\n      }\n\n      console.log(\"HISTORY\" + props.history.length + props.history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n  });\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {scores[0]} - O : {scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [history, setHistory] = useState([]);\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board history={history} setHistory={setHistory} />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;*/","map":{"version":3,"sources":["/Users/antoineroy/Documents/tictactoe/src/App.js"],"names":["React","useState","Board","Players","Winner","RestartButton","Game","turnRed","setTurnRed","turnCount","setTurnCount","playerOne","playerTwo","players","setPlayers","winner","setWinner","scores","setScores","Array","fill","board","setBoard","nameAreSet","setNameAreSet","startNewRound","console","log","newBoard","handleColumnClick","id","nextBoard","slice","index","indexOf","oldTurnCount","findADraw","newScores","findFourInARow","arr","forEach","arrInArr","i","length","a","b","c","d","calculateWinner","rows","diags","handlePlayerSubmit","e","preventDefault","handlePlayerChange","newPlayers","target","name","value","renderWinner","theWinner","onClickFunct"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/Board\";\nimport Players from \"./components/Players\";\nimport Winner from \"./components/Winner\";\nimport RestartButton from \"./components/RestartButton\";\n\nfunction Game() {\n  const [turnRed, setTurnRed] = useState(true);\n  const [turnCount, setTurnCount] = useState(0);\n  const [players, setPlayers] = useState({\n    playerOne: \"Player 1\",\n    playerTwo: \"Player 2\"\n  });\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState({ playerOne: 0, playerTwo: 0 });\n  const [board, setBoard] = useState([\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null)\n  ]);\n  const [nameAreSet, setNameAreSet] = useState(false);\n  function startNewRound() {\n    console.log(\"New Round Started\");\n\n    setWinner(null);\n    let newBoard = [\n      Array(6).fill(null),\n      Array(6).fill(null),\n      Array(6).fill(null),\n      Array(6).fill(null),\n      Array(6).fill(null),\n      Array(6).fill(null),\n      Array(6).fill(null)\n    ];\n    setBoard(newBoard);\n    setTurnCount(0);\n  }\n\n  //Board related Functions\n\n  function handleColumnClick(id) {\n    console.log(\"TURNCOUNT------\" + turnCount);\n    if (winner === null) {\n      if (turnRed === true) {\n        let nextBoard = board.slice();\n        let index = nextBoard[id].indexOf(null);\n        if (~index) {\n          nextBoard[id][index] = \"R\";\n          let oldTurnCount = turnCount;\n          setTurnCount(oldTurnCount + 1);\n        }\n        setTurnRed(!turnRed);\n        setBoard(nextBoard);\n      } else {\n        let nextBoard = board.slice();\n        let index = nextBoard[id].indexOf(null);\n        if (~index) {\n          nextBoard[id][index] = \"Y\";\n          let oldTurnCount = turnCount;\n          setTurnCount(oldTurnCount + 1);\n        }\n        setTurnRed(!turnRed);\n        setBoard(nextBoard);\n      }\n    }\n    return;\n  }\n  function findADraw() {\n    if (turnCount > 41 && winner === null) {\n      setWinner(\"This is a Draw nobody\");\n      console.log(\"This is a Draw nobody\");\n      let newScores = { ...scores };\n      newScores.playerTwo += 1;\n      newScores.playerOne += 1;\n      setScores(newScores);\n    }\n  }\n  function findFourInARow(arr) {\n    arr.forEach(arrInArr => {\n      for (let i = 0; i < arrInArr.length - 3; i++) {\n        let a = i;\n        let b = i + 1;\n        let c = i + 2;\n        let d = i + 3;\n\n        if (\n          arrInArr[a] &&\n          arrInArr[a] === arrInArr[b] &&\n          arrInArr[a] === arrInArr[c] &&\n          arrInArr[a] === arrInArr[d]\n        ) {\n          if (arrInArr[a] === \"R\") {\n            setWinner(players.playerOne);\n            setScores(scores.playerOne + 1);\n            let newScores = { ...scores };\n            newScores.playerOne += 1;\n            setScores(newScores);\n          } else if (arrInArr[a] === \"Y\") {\n            setWinner(players.playerTwo);\n            let newScores = { ...scores };\n            newScores.playerTwo += 1;\n            setScores(newScores);\n          } else {\n            return;\n          }\n        }\n      }\n    });\n  }\n  //Winner related functions\n  function calculateWinner() {\n    if (winner === null) {\n      findFourInARow(board);\n      findFourInARow(rows);\n      findFourInARow(diags);\n      findADraw();\n    }\n  }\n\n  function handlePlayerSubmit(e) {\n    e.preventDefault();\n    setNameAreSet(true);\n  }\n  function handlePlayerChange(e) {\n    e.preventDefault();\n    let newPlayers = { ...players };\n    e.target.name === \"PlayerOne\"\n      ? (newPlayers = { ...players, playerOne: e.target.value })\n      : (newPlayers = { ...players, playerTwo: e.target.value });\n    console.log(newPlayers);\n    setPlayers({ ...newPlayers });\n  }\n  function renderWinner(theWinner, onClickFunct) {\n    if (theWinner != null) {\n      return (\n        <div className=\"winner\">\n          <div>\n            <h1>\n              {theWinner}\n              <br />\n              wins !\n            </h1>\n            <RestartButton onClick={onClickFunct} />\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n  const rows = [\n    [\n      board[0][0],\n      board[1][0],\n      board[2][0],\n      board[3][0],\n      board[4][0],\n      board[5][0],\n      board[6][0]\n    ],\n    [\n      board[0][1],\n      board[1][1],\n      board[2][1],\n      board[3][1],\n      board[4][1],\n      board[5][1],\n      board[6][1]\n    ],\n    [\n      board[0][2],\n      board[1][2],\n      board[2][2],\n      board[3][2],\n      board[4][2],\n      board[5][2],\n      board[6][2]\n    ],\n    [\n      board[0][3],\n      board[1][3],\n      board[2][3],\n      board[3][3],\n      board[4][3],\n      board[5][3],\n      board[6][3]\n    ],\n    [\n      board[0][4],\n      board[1][4],\n      board[2][4],\n      board[3][4],\n      board[4][4],\n      board[5][4],\n      board[6][4]\n    ],\n    [\n      board[0][5],\n      board[1][5],\n      board[2][5],\n      board[3][5],\n      board[4][5],\n      board[5][5],\n      board[6][5]\n    ]\n  ];\n\n  const diags = [\n    [board[0][3], board[1][2], board[2][1], board[3][0]],\n    [board[0][4], board[1][3], board[2][2], board[3][1], board[4][0]],\n    [\n      board[0][5],\n      board[1][4],\n      board[2][3],\n      board[3][2],\n      board[4][1],\n      board[5][0]\n    ],\n    [\n      board[1][5],\n      board[2][4],\n      board[3][3],\n      board[4][2],\n      board[5][1],\n      board[6][0]\n    ],\n    [board[2][5], board[3][4], board[4][3], board[5][2], board[6][1]],\n    [board[3][5], board[4][4], board[5][3], board[6][2]],\n    [board[0][2], board[1][3], board[2][4], board[3][5]],\n    [board[0][1], board[1][2], board[2][3], board[3][4], board[4][5]],\n    [\n      board[0][0],\n      board[1][1],\n      board[2][2],\n      board[3][3],\n      board[4][4],\n      board[5][5]\n    ],\n    [\n      board[1][0],\n      board[2][1],\n      board[3][2],\n      board[4][3],\n      board[5][4],\n      board[6][5]\n    ],\n    [board[2][0], board[3][1], board[4][2], board[5][3], board[6][4]],\n    [board[3][0], board[4][1], board[5][2], board[6][3]]\n  ];\n\n  return (\n    <div>\n      <div>\n        <Players\n          players={players}\n          handlePlayerChange={handlePlayerChange}\n          handlePlayerSubmit={handlePlayerSubmit}\n          scores={scores}\n          nameAreSet={nameAreSet}\n        />\n      </div>\n      <Winner\n        players={players}\n        renderWinner={renderWinner}\n        winner={winner}\n        restart={startNewRound}\n      />\n      <div>\n        <Board\n          board={board}\n          handleColumnClick={handleColumnClick}\n          calculateWinner={calculateWinner}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n\n/*function Game() {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [historySquares, setHistorySquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n  const [history, setHistory] = useState([]);\n\n  function renderSquare(i) {\n    return <Square value={arrInArr[i]} onClick={handleClick} />;\n    function handleClick() {\n      if (winner === null) {\n        const nextSquares = arrInArr.slice();\n        if (nextSquares[i] === null) {\n          nextSquares[i] = OisNext ? \"X\" : \"O\";\n        } else {\n          return;\n        }\n        setSquares(nextSquares);\n        setOisNext(!OisNext);\n        console.log(arrInArr);\n      } else {\n        return;\n      }\n    }\n  }\n\n  function renderHistorySquare(x) {\n    return <historySquare value={historySquares[x]} />;\n  }\n\n  useEffect(() => {\n    function calculateWinner(arrInArr) {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (\n          arrInArr[a] &&\n          arrInArr[a] === arrInArr[b] &&\n          arrInArr[a] === arrInArr[c]\n        ) {\n          console.log(\"WINNER!\");\n          setWinner(arrInArr[a]);\n        }\n      }\n      console.log(\"NO WINNER\");\n      return;\n    }\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      let nextHistory = history.slice();\n      nextHistory.push([arrInArr]);\n      setHistory(nextHistory);\n      console.log(\"HISTORY IN CW \" + history);\n\n      console.log(\"HISTORY\" + history.length + history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n    return console.log(\"useffect calculate winner unmount\");\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          arrInArr={arrInArr}\n          setSquares={setSquares}\n          historySquares={historySquares}\n          setHistorySquares={setHistorySquares}\n          OisNext={OisNext}\n          setOisNext={setOisNext}\n          winner={winner}\n          setWinner={setWinner}\n          scores={scores}\n          setScores={setScores}\n          history={history}\n          setHistory={setHistory}\n          renderSquare={renderSquare}\n        />\n      </div>\n      <div className=\"history-board\">\n        <HistoryBoard\n          historySquares={historySquares}\n          winner={winner}\n          history={history}\n          renderHistorySquare={renderHistorySquare}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\nfunction createHistory(history){\n  for (let i = 0; i < history.length; i++) {\n    <div id={i}>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][0])}\n        {props.renderHistorySquare(props.history[i][1])}\n        {props.renderHistorySquare(props.history[i][2])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][3])}\n        {props.renderHistorySquare(props.history[i][4])}\n        {props.renderHistorySquare(props.history[i][5])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][6])}\n        {props.renderHistorySquare(props.history[i][7])}\n        {props.renderHistorySquare(props.history[i][8])}\n      </div>\n    </div>\n\n  }\n}\nfunction HistoryBoard(props) {\n  if (props.history.length === 0) {\n    return <div>History</div>;\n  } else {\n    console.log(\"my history \" + props.history[0]);\n    return(\n    );\n  }\n}\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\nfunction historySquare(value) {\n  return <button className=\"square\">{value}</button>;\n}\n\nfunction Board(props) {\n  function declareTurn() {\n    return props.OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {props.scores[0]} - O : {props.scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {props.renderSquare(0)}\n          {props.renderSquare(1)}\n          {props.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(3)}\n          {props.renderSquare(4)}\n          {props.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(6)}\n          {props.renderSquare(7)}\n          {props.renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n\n/*import React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={arrInArr[i]}\n        onClick={() => {\n          if (winner === null) {\n            const nextSquares = arrInArr.slice();\n            if (nextSquares[i] === null) {\n              nextSquares[i] = OisNext ? \"X\" : \"O\";\n            } else {\n              return;\n            }\n            setSquares(nextSquares);\n            setOisNext(!OisNext);\n            console.log(arrInArr);\n          } else {\n            return;\n          }\n        }}\n      />\n    );\n  }\n  function calculateWinner(arrInArr) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        arrInArr[a] &&\n        arrInArr[a] === arrInArr[b] &&\n        arrInArr[a] === arrInArr[c]\n      ) {\n        console.log(\"WINNER!\");\n        setWinner(arrInArr[a]);\n      }\n    }\n    console.log(\"NO WINNER\");\n    return;\n  }\n\n  function declareTurn() {\n    return OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n  useEffect(() => {\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      if (props.history.length === 0) {\n        props.setHistory(arrInArr);\n      } else {\n        props.setHistory(props.history + arrInArr);\n      }\n\n      console.log(\"HISTORY\" + props.history.length + props.history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n  });\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {scores[0]} - O : {scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [history, setHistory] = useState([]);\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board history={history} setHistory={setHistory} />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;*/\n"]},"metadata":{},"sourceType":"module"}