{"ast":null,"code":"import _objectSpread from \"/Users/antoineroy/Documents/tictactoe/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/antoineroy/Documents/tictactoe/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/antoineroy/Documents/tictactoe/src/App.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\nimport { rows, diags } from \"./diagAndRows\";\n\nfunction Game() {\n  //players\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      turnRed = _useState2[0],\n      setTurnRed = _useState2[1];\n\n  var _useState3 = useState({\n    playerOne: \"Player 1\",\n    playerTwo: \"Player 2\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      players = _useState4[0],\n      setPlayers = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      winner = _useState6[0],\n      setWinner = _useState6[1];\n\n  var _useState7 = useState({\n    playerOne: 0,\n    playerTwo: 0\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      scores = _useState8[0],\n      setScores = _useState8[1];\n\n  var _useState9 = useState([Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null), Array(6).fill(null)]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      board = _useState10[0],\n      setBoard = _useState10[1];\n\n  function handleColumnClick(id) {\n    if (turnRed === true) {\n      var nextBoard = board.slice();\n      var index = nextBoard[id].indexOf(null);\n\n      if (~index) {\n        nextBoard[id][index] = \"R\";\n        console.log(nextBoard[id][index].length);\n      }\n\n      setTurnRed(!turnRed);\n      setBoard(nextBoard);\n    } else {\n      var _nextBoard = board.slice();\n\n      var _index = _nextBoard[id].indexOf(null);\n\n      if (~_index) {\n        _nextBoard[id][_index] = \"Y\";\n      }\n\n      setTurnRed(!turnRed);\n      setBoard(_nextBoard);\n    }\n\n    return;\n  }\n\n  function findFourInARow(arr) {\n    arr.forEach(function (arrInArr) {\n      for (var i = 0; i < arrInArr.length - 4; i++) {\n        var a = i;\n        var b = i + 1;\n        var c = i + 2;\n        var d = i + 3;\n        console.log(arrInArr[a]);\n\n        if (arrInArr[a] && arrInArr[a] === arrInArr[b] && arrInArr[a] === arrInArr[c] && arrInArr[a] === arrInArr[d]) {\n          arrInArr[a] === \"R\" ? setWinner(React.createElement(\"div\", {\n            className: \"winner\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, players.playerOne, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 65\n            },\n            __self: this\n          }), \"wins !\"))) : setWinner(React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, players.playerTwo, React.createElement(\"br\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }), \"wins !\"));\n        }\n      }\n    });\n  }\n\n  function calculateWinner() {\n    if (winner === null) {\n      findFourInARow(board);\n      findFourInARow(rows);\n      findFourInARow(diags);\n    }\n  }\n\n  function handlePlayerChange(e) {\n    e.preventDefault();\n\n    var newPlayers = _objectSpread({}, players);\n\n    e.target.name === \"PlayerOne\" ? newPlayers = _objectSpread({}, players, {\n      playerOne: e.target.value\n    }) : newPlayers = _objectSpread({}, players, {\n      playerTwo: e.target.value\n    });\n    console.log(newPlayers);\n    setPlayers(_objectSpread({}, newPlayers));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(Players, {\n    players: players,\n    handlePlayerChange: handlePlayerChange,\n    scores: scores,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, winner)), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Board, {\n    board: board,\n    handleColumnClick: handleColumnClick,\n    calculateWinner: calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  })));\n} // Board\n\n\nfunction Board(props) {\n  return React.createElement(\"div\", {\n    className: \"board board-style\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Column, {\n    id: 0,\n    arrInArr: props.board[0],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }), React.createElement(Column, {\n    id: 1,\n    arrInArr: props.board[1],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }), React.createElement(Column, {\n    id: 2,\n    arrInArr: props.board[2],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }), React.createElement(Column, {\n    id: 3,\n    arrInArr: props.board[3],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(Column, {\n    id: 4,\n    arrInArr: props.board[4],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }), React.createElement(Column, {\n    id: 5,\n    arrInArr: props.board[5],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), React.createElement(Column, {\n    id: 6,\n    arrInArr: props.board[6],\n    handleColumnClick: props.handleColumnClick,\n    calculateWinner: props.calculateWinner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }));\n}\n\nfunction Column(props) {\n  useEffect(props.calculateWinner);\n  return React.createElement(\"button\", {\n    className: \"column\",\n    onClick: function onClick() {\n      props.handleColumnClick(props.id);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, renderSquares(props.arrInArr));\n}\n\nfunction renderSquares(square) {\n  function convertSquare(square) {\n    switch (square) {\n      case \"R\":\n        square = React.createElement(\"div\", {\n          className: \"red chip\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        });\n        break;\n\n      case \"Y\":\n        square = React.createElement(\"div\", {\n          className: \"yellow chip\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190\n          },\n          __self: this\n        });\n        break;\n\n      default:\n        square = null;\n    }\n\n    return square;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"squares\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"square shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199\n    },\n    __self: this\n  }, convertSquare(square[0])), React.createElement(\"div\", {\n    className: \"square shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200\n    },\n    __self: this\n  }, convertSquare(square[1])), React.createElement(\"div\", {\n    className: \"square shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201\n    },\n    __self: this\n  }, convertSquare(square[2])), React.createElement(\"div\", {\n    className: \"square shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, convertSquare(square[3])), React.createElement(\"div\", {\n    className: \"square shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, convertSquare(square[4])), React.createElement(\"div\", {\n    className: \"square shadow\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, convertSquare(square[5])));\n} //Players\n\n\nfunction Players(props) {\n  return React.createElement(\"div\", {\n    className: \"players\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    label: \"Player 1\",\n    type: \"text\",\n    name: \"PlayerOne\",\n    onChange: props.handlePlayerChange,\n    value: props.players.playerOne,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    label: \"Player 2\",\n    type: \"text\",\n    name: \"PlayerTwo\",\n    onChange: props.handlePlayerChange,\n    value: props.players.playerTwo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"scores\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, props.players.playerOne, \" VS \", props.players.playerTwo), React.createElement(\"p\", {\n    className: \"scores\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, props.scores.playerOne, \" - \", props.scores.playerTwo));\n}\n\nexport default Game;\n/*function Game() {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [historySquares, setHistorySquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n  const [history, setHistory] = useState([]);\n\n  function renderSquare(i) {\n    return <Square value={arrInArr[i]} onClick={handleClick} />;\n    function handleClick() {\n      if (winner === null) {\n        const nextSquares = arrInArr.slice();\n        if (nextSquares[i] === null) {\n          nextSquares[i] = OisNext ? \"X\" : \"O\";\n        } else {\n          return;\n        }\n        setSquares(nextSquares);\n        setOisNext(!OisNext);\n        console.log(arrInArr);\n      } else {\n        return;\n      }\n    }\n  }\n\n  function renderHistorySquare(x) {\n    return <historySquare value={historySquares[x]} />;\n  }\n\n  useEffect(() => {\n    function calculateWinner(arrInArr) {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (\n          arrInArr[a] &&\n          arrInArr[a] === arrInArr[b] &&\n          arrInArr[a] === arrInArr[c]\n        ) {\n          console.log(\"WINNER!\");\n          setWinner(arrInArr[a]);\n        }\n      }\n      console.log(\"NO WINNER\");\n      return;\n    }\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      let nextHistory = history.slice();\n      nextHistory.push([arrInArr]);\n      setHistory(nextHistory);\n      console.log(\"HISTORY IN CW \" + history);\n\n      console.log(\"HISTORY\" + history.length + history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n    return console.log(\"useffect calculate winner unmount\");\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          arrInArr={arrInArr}\n          setSquares={setSquares}\n          historySquares={historySquares}\n          setHistorySquares={setHistorySquares}\n          OisNext={OisNext}\n          setOisNext={setOisNext}\n          winner={winner}\n          setWinner={setWinner}\n          scores={scores}\n          setScores={setScores}\n          history={history}\n          setHistory={setHistory}\n          renderSquare={renderSquare}\n        />\n      </div>\n      <div className=\"history-board\">\n        <HistoryBoard\n          historySquares={historySquares}\n          winner={winner}\n          history={history}\n          renderHistorySquare={renderHistorySquare}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\nfunction createHistory(history){\n  for (let i = 0; i < history.length; i++) {\n    <div id={i}>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][0])}\n        {props.renderHistorySquare(props.history[i][1])}\n        {props.renderHistorySquare(props.history[i][2])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][3])}\n        {props.renderHistorySquare(props.history[i][4])}\n        {props.renderHistorySquare(props.history[i][5])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][6])}\n        {props.renderHistorySquare(props.history[i][7])}\n        {props.renderHistorySquare(props.history[i][8])}\n      </div>\n    </div>\n\n  }\n}\nfunction HistoryBoard(props) {\n  if (props.history.length === 0) {\n    return <div>History</div>;\n  } else {\n    console.log(\"my history \" + props.history[0]);\n    return(\n    );\n  }\n}\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\nfunction historySquare(value) {\n  return <button className=\"square\">{value}</button>;\n}\n\nfunction Board(props) {\n  function declareTurn() {\n    return props.OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {props.scores[0]} - O : {props.scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {props.renderSquare(0)}\n          {props.renderSquare(1)}\n          {props.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(3)}\n          {props.renderSquare(4)}\n          {props.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(6)}\n          {props.renderSquare(7)}\n          {props.renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n\n/*import React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={arrInArr[i]}\n        onClick={() => {\n          if (winner === null) {\n            const nextSquares = arrInArr.slice();\n            if (nextSquares[i] === null) {\n              nextSquares[i] = OisNext ? \"X\" : \"O\";\n            } else {\n              return;\n            }\n            setSquares(nextSquares);\n            setOisNext(!OisNext);\n            console.log(arrInArr);\n          } else {\n            return;\n          }\n        }}\n      />\n    );\n  }\n  function calculateWinner(arrInArr) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        arrInArr[a] &&\n        arrInArr[a] === arrInArr[b] &&\n        arrInArr[a] === arrInArr[c]\n      ) {\n        console.log(\"WINNER!\");\n        setWinner(arrInArr[a]);\n      }\n    }\n    console.log(\"NO WINNER\");\n    return;\n  }\n\n  function declareTurn() {\n    return OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n  useEffect(() => {\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      if (props.history.length === 0) {\n        props.setHistory(arrInArr);\n      } else {\n        props.setHistory(props.history + arrInArr);\n      }\n\n      console.log(\"HISTORY\" + props.history.length + props.history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n  });\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {scores[0]} - O : {scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [history, setHistory] = useState([]);\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board history={history} setHistory={setHistory} />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;*/","map":{"version":3,"sources":["/Users/antoineroy/Documents/tictactoe/src/App.js"],"names":["React","useState","useContext","useEffect","rows","diags","Game","turnRed","setTurnRed","playerOne","playerTwo","players","setPlayers","winner","setWinner","scores","setScores","Array","fill","board","setBoard","handleColumnClick","id","nextBoard","slice","index","indexOf","console","log","length","findFourInARow","arr","forEach","arrInArr","i","a","b","c","d","calculateWinner","handlePlayerChange","e","preventDefault","newPlayers","target","name","value","Board","props","Column","renderSquares","square","convertSquare","Players"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAO,WAAP;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,eAA5B;;AAEA,SAASC,IAAT,GAAgB;AACd;AADc,kBAEgBL,QAAQ,CAAC,IAAD,CAFxB;AAAA;AAAA,MAEPM,OAFO;AAAA,MAEEC,UAFF;;AAAA,mBAGgBP,QAAQ,CAAC;AACrCQ,IAAAA,SAAS,EAAE,UAD0B;AAErCC,IAAAA,SAAS,EAAE;AAF0B,GAAD,CAHxB;AAAA;AAAA,MAGPC,OAHO;AAAA,MAGEC,UAHF;;AAAA,mBAOcX,QAAQ,CAAC,IAAD,CAPtB;AAAA;AAAA,MAOPY,MAPO;AAAA,MAOCC,SAPD;;AAAA,mBAQcb,QAAQ,CAAC;AAAEQ,IAAAA,SAAS,EAAE,CAAb;AAAgBC,IAAAA,SAAS,EAAE;AAA3B,GAAD,CARtB;AAAA;AAAA,MAQPK,MARO;AAAA,MAQCC,SARD;;AAAA,mBASYf,QAAQ,CAAC,CACjCgB,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADiC,EAEjCD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAFiC,EAGjCD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAHiC,EAIjCD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAJiC,EAKjCD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CALiC,EAMjCD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CANiC,EAOjCD,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAPiC,CAAD,CATpB;AAAA;AAAA,MASPC,KATO;AAAA,MASAC,QATA;;AAmBd,WAASC,iBAAT,CAA2BC,EAA3B,EAA+B;AAC7B,QAAIf,OAAO,KAAK,IAAhB,EAAsB;AACpB,UAAIgB,SAAS,GAAGJ,KAAK,CAACK,KAAN,EAAhB;AACA,UAAIC,KAAK,GAAGF,SAAS,CAACD,EAAD,CAAT,CAAcI,OAAd,CAAsB,IAAtB,CAAZ;;AACA,UAAI,CAACD,KAAL,EAAY;AACVF,QAAAA,SAAS,CAACD,EAAD,CAAT,CAAcG,KAAd,IAAuB,GAAvB;AACAE,QAAAA,OAAO,CAACC,GAAR,CAAYL,SAAS,CAACD,EAAD,CAAT,CAAcG,KAAd,EAAqBI,MAAjC;AACD;;AACDrB,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAa,MAAAA,QAAQ,CAACG,SAAD,CAAR;AACD,KATD,MASO;AACL,UAAIA,UAAS,GAAGJ,KAAK,CAACK,KAAN,EAAhB;;AACA,UAAIC,MAAK,GAAGF,UAAS,CAACD,EAAD,CAAT,CAAcI,OAAd,CAAsB,IAAtB,CAAZ;;AACA,UAAI,CAACD,MAAL,EAAY;AACVF,QAAAA,UAAS,CAACD,EAAD,CAAT,CAAcG,MAAd,IAAuB,GAAvB;AACD;;AACDjB,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACAa,MAAAA,QAAQ,CAACG,UAAD,CAAR;AACD;;AACD;AACD;;AAED,WAASO,cAAT,CAAwBC,GAAxB,EAA6B;AAC3BA,IAAAA,GAAG,CAACC,OAAJ,CAAY,UAAAC,QAAQ,EAAI;AACtB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACJ,MAAT,GAAkB,CAAtC,EAAyCK,CAAC,EAA1C,EAA8C;AAC5C,YAAIC,CAAC,GAAGD,CAAR;AACA,YAAIE,CAAC,GAAGF,CAAC,GAAG,CAAZ;AACA,YAAIG,CAAC,GAAGH,CAAC,GAAG,CAAZ;AACA,YAAII,CAAC,GAAGJ,CAAC,GAAG,CAAZ;AACAP,QAAAA,OAAO,CAACC,GAAR,CAAYK,QAAQ,CAACE,CAAD,CAApB;;AACA,YACEF,QAAQ,CAACE,CAAD,CAAR,IACAF,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACG,CAAD,CADxB,IAEAH,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACI,CAAD,CAFxB,IAGAJ,QAAQ,CAACE,CAAD,CAAR,KAAgBF,QAAQ,CAACK,CAAD,CAJ1B,EAKE;AACAL,UAAAA,QAAQ,CAACE,CAAD,CAAR,KAAgB,GAAhB,GACIrB,SAAS,CACP;AAAK,YAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGH,OAAO,CAACF,SADX,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,WADF,CADO,CADb,GAUIK,SAAS,CACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACGH,OAAO,CAACD,SADX,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,WADO,CAVb;AAiBD;AACF;AACF,KAhCD;AAiCD;;AAED,WAAS6B,eAAT,GAA2B;AACzB,QAAI1B,MAAM,KAAK,IAAf,EAAqB;AACnBiB,MAAAA,cAAc,CAACX,KAAD,CAAd;AACAW,MAAAA,cAAc,CAAC1B,IAAD,CAAd;AACA0B,MAAAA,cAAc,CAACzB,KAAD,CAAd;AACD;AACF;;AACD,WAASmC,kBAAT,CAA4BC,CAA5B,EAA+B;AAC7BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAIC,UAAU,qBAAQhC,OAAR,CAAd;;AACA8B,IAAAA,CAAC,CAACG,MAAF,CAASC,IAAT,KAAkB,WAAlB,GACKF,UAAU,qBAAQhC,OAAR;AAAiBF,MAAAA,SAAS,EAAEgC,CAAC,CAACG,MAAF,CAASE;AAArC,MADf,GAEKH,UAAU,qBAAQhC,OAAR;AAAiBD,MAAAA,SAAS,EAAE+B,CAAC,CAACG,MAAF,CAASE;AAArC,MAFf;AAGAnB,IAAAA,OAAO,CAACC,GAAR,CAAYe,UAAZ;AACA/B,IAAAA,UAAU,mBAAM+B,UAAN,EAAV;AACD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,OAAO,EAAEhC,OADX;AAEE,IAAA,kBAAkB,EAAE6B,kBAFtB;AAGE,IAAA,MAAM,EAAEzB,MAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMF,MAAN,CANF,CADF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAEM,KADT;AAEE,IAAA,iBAAiB,EAAEE,iBAFrB;AAGE,IAAA,eAAe,EAAEkB,eAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAVF,CADF;AAoBD,C,CAED;;;AACA,SAASQ,KAAT,CAAeC,KAAf,EAAsB;AACpB,SACE;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAEA,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAES,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAaE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAES,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAmBE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAES,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,EAyBE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAES,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBF,EA+BE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAES,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BF,EAqCE,oBAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,QAAQ,EAAES,KAAK,CAAC7B,KAAN,CAAY,CAAZ,CAFZ;AAGE,IAAA,iBAAiB,EAAE6B,KAAK,CAAC3B,iBAH3B;AAIE,IAAA,eAAe,EAAE2B,KAAK,CAACT,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArCF,CADF;AA8CD;;AACD,SAASU,MAAT,CAAgBD,KAAhB,EAAuB;AACrB7C,EAAAA,SAAS,CAAC6C,KAAK,CAACT,eAAP,CAAT;AACA,SACE;AACE,IAAA,SAAS,EAAC,QADZ;AAEE,IAAA,OAAO,EAAE,mBAAM;AACbS,MAAAA,KAAK,CAAC3B,iBAAN,CAAwB2B,KAAK,CAAC1B,EAA9B;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMG4B,aAAa,CAACF,KAAK,CAACf,QAAP,CANhB,CADF;AAUD;;AACD,SAASiB,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,WAASC,aAAT,CAAuBD,MAAvB,EAA+B;AAC7B,YAAQA,MAAR;AACE,WAAK,GAAL;AACEA,QAAAA,MAAM,GAAG;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACA;;AACF,WAAK,GAAL;AACEA,QAAAA,MAAM,GAAG;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AACA;;AACF;AACEA,QAAAA,MAAM,GAAG,IAAT;AARJ;;AAUA,WAAOA,MAAP;AACD;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,aAAa,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7C,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,aAAa,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7C,CAFF,EAGE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,aAAa,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7C,CAHF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,aAAa,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7C,CAJF,EAKE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,aAAa,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7C,CALF,EAME;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,aAAa,CAACD,MAAM,CAAC,CAAD,CAAP,CAA7C,CANF,CADF;AAUD,C,CAED;;;AACA,SAASE,OAAT,CAAiBL,KAAjB,EAAwB;AACtB,SACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,QAAQ,EAAEA,KAAK,CAACR,kBAJlB;AAKE,IAAA,KAAK,EAAEQ,KAAK,CAACrC,OAAN,CAAcF,SALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAQE;AACE,IAAA,KAAK,EAAC,UADR;AAEE,IAAA,IAAI,EAAC,MAFP;AAGE,IAAA,IAAI,EAAC,WAHP;AAIE,IAAA,QAAQ,EAAEuC,KAAK,CAACR,kBAJlB;AAKE,IAAA,KAAK,EAAEQ,KAAK,CAACrC,OAAN,CAAcD,SALvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAeE;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsC,KAAK,CAACrC,OAAN,CAAcF,SADjB,UACgCuC,KAAK,CAACrC,OAAN,CAAcD,SAD9C,CAfF,EAkBE;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGsC,KAAK,CAACjC,MAAN,CAAaN,SADhB,SAC8BuC,KAAK,CAACjC,MAAN,CAAaL,SAD3C,CAlBF,CADF;AAwBD;;AAED,eAAeJ,IAAf;AAEA","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\nimport { rows, diags } from \"./diagAndRows\";\n\nfunction Game() {\n  //players\n  const [turnRed, setTurnRed] = useState(true);\n  const [players, setPlayers] = useState({\n    playerOne: \"Player 1\",\n    playerTwo: \"Player 2\"\n  });\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState({ playerOne: 0, playerTwo: 0 });\n  const [board, setBoard] = useState([\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null),\n    Array(6).fill(null)\n  ]);\n\n  function handleColumnClick(id) {\n    if (turnRed === true) {\n      let nextBoard = board.slice();\n      let index = nextBoard[id].indexOf(null);\n      if (~index) {\n        nextBoard[id][index] = \"R\";\n        console.log(nextBoard[id][index].length);\n      }\n      setTurnRed(!turnRed);\n      setBoard(nextBoard);\n    } else {\n      let nextBoard = board.slice();\n      let index = nextBoard[id].indexOf(null);\n      if (~index) {\n        nextBoard[id][index] = \"Y\";\n      }\n      setTurnRed(!turnRed);\n      setBoard(nextBoard);\n    }\n    return;\n  }\n\n  function findFourInARow(arr) {\n    arr.forEach(arrInArr => {\n      for (let i = 0; i < arrInArr.length - 4; i++) {\n        let a = i;\n        let b = i + 1;\n        let c = i + 2;\n        let d = i + 3;\n        console.log(arrInArr[a]);\n        if (\n          arrInArr[a] &&\n          arrInArr[a] === arrInArr[b] &&\n          arrInArr[a] === arrInArr[c] &&\n          arrInArr[a] === arrInArr[d]\n        ) {\n          arrInArr[a] === \"R\"\n            ? setWinner(\n                <div className=\"winner\">\n                  <h1>\n                    {players.playerOne}\n                    <br />\n                    wins !\n                  </h1>\n                </div>\n              )\n            : setWinner(\n                <h1>\n                  {players.playerTwo}\n                  <br />\n                  wins !\n                </h1>\n              );\n        }\n      }\n    });\n  }\n\n  function calculateWinner() {\n    if (winner === null) {\n      findFourInARow(board);\n      findFourInARow(rows);\n      findFourInARow(diags);\n    }\n  }\n  function handlePlayerChange(e) {\n    e.preventDefault();\n    let newPlayers = { ...players };\n    e.target.name === \"PlayerOne\"\n      ? (newPlayers = { ...players, playerOne: e.target.value })\n      : (newPlayers = { ...players, playerTwo: e.target.value });\n    console.log(newPlayers);\n    setPlayers({ ...newPlayers });\n  }\n\n  return (\n    <div>\n      <div>\n        <Players\n          players={players}\n          handlePlayerChange={handlePlayerChange}\n          scores={scores}\n        />\n        <div>{winner}</div>\n      </div>\n\n      <div>\n        <Board\n          board={board}\n          handleColumnClick={handleColumnClick}\n          calculateWinner={calculateWinner}\n        />\n      </div>\n    </div>\n  );\n}\n\n// Board\nfunction Board(props) {\n  return (\n    <div className=\"board board-style\">\n      <Column\n        id={0}\n        arrInArr={props.board[0]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n      <Column\n        id={1}\n        arrInArr={props.board[1]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n      <Column\n        id={2}\n        arrInArr={props.board[2]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n      <Column\n        id={3}\n        arrInArr={props.board[3]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n      <Column\n        id={4}\n        arrInArr={props.board[4]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n      <Column\n        id={5}\n        arrInArr={props.board[5]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n      <Column\n        id={6}\n        arrInArr={props.board[6]}\n        handleColumnClick={props.handleColumnClick}\n        calculateWinner={props.calculateWinner}\n      />\n    </div>\n  );\n}\nfunction Column(props) {\n  useEffect(props.calculateWinner);\n  return (\n    <button\n      className=\"column\"\n      onClick={() => {\n        props.handleColumnClick(props.id);\n      }}\n    >\n      {renderSquares(props.arrInArr)}\n    </button>\n  );\n}\nfunction renderSquares(square) {\n  function convertSquare(square) {\n    switch (square) {\n      case \"R\":\n        square = <div className=\"red chip\" />;\n        break;\n      case \"Y\":\n        square = <div className=\"yellow chip\" />;\n        break;\n      default:\n        square = null;\n    }\n    return square;\n  }\n  return (\n    <div className=\"squares\">\n      <div className=\"square shadow\">{convertSquare(square[0])}</div>\n      <div className=\"square shadow\">{convertSquare(square[1])}</div>\n      <div className=\"square shadow\">{convertSquare(square[2])}</div>\n      <div className=\"square shadow\">{convertSquare(square[3])}</div>\n      <div className=\"square shadow\">{convertSquare(square[4])}</div>\n      <div className=\"square shadow\">{convertSquare(square[5])}</div>\n    </div>\n  );\n}\n\n//Players\nfunction Players(props) {\n  return (\n    <div className=\"players\">\n      <input\n        label=\"Player 1\"\n        type=\"text\"\n        name=\"PlayerOne\"\n        onChange={props.handlePlayerChange}\n        value={props.players.playerOne}\n      />\n      <input\n        label=\"Player 2\"\n        type=\"text\"\n        name=\"PlayerTwo\"\n        onChange={props.handlePlayerChange}\n        value={props.players.playerTwo}\n      />\n      <p className=\"scores\">\n        {props.players.playerOne} VS {props.players.playerTwo}\n      </p>\n      <p className=\"scores\">\n        {props.scores.playerOne} - {props.scores.playerTwo}\n      </p>\n    </div>\n  );\n}\n\nexport default Game;\n\n/*function Game() {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [historySquares, setHistorySquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n  const [history, setHistory] = useState([]);\n\n  function renderSquare(i) {\n    return <Square value={arrInArr[i]} onClick={handleClick} />;\n    function handleClick() {\n      if (winner === null) {\n        const nextSquares = arrInArr.slice();\n        if (nextSquares[i] === null) {\n          nextSquares[i] = OisNext ? \"X\" : \"O\";\n        } else {\n          return;\n        }\n        setSquares(nextSquares);\n        setOisNext(!OisNext);\n        console.log(arrInArr);\n      } else {\n        return;\n      }\n    }\n  }\n\n  function renderHistorySquare(x) {\n    return <historySquare value={historySquares[x]} />;\n  }\n\n  useEffect(() => {\n    function calculateWinner(arrInArr) {\n      const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6]\n      ];\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (\n          arrInArr[a] &&\n          arrInArr[a] === arrInArr[b] &&\n          arrInArr[a] === arrInArr[c]\n        ) {\n          console.log(\"WINNER!\");\n          setWinner(arrInArr[a]);\n        }\n      }\n      console.log(\"NO WINNER\");\n      return;\n    }\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      let nextHistory = history.slice();\n      nextHistory.push([arrInArr]);\n      setHistory(nextHistory);\n      console.log(\"HISTORY IN CW \" + history);\n\n      console.log(\"HISTORY\" + history.length + history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n    return console.log(\"useffect calculate winner unmount\");\n  });\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board\n          arrInArr={arrInArr}\n          setSquares={setSquares}\n          historySquares={historySquares}\n          setHistorySquares={setHistorySquares}\n          OisNext={OisNext}\n          setOisNext={setOisNext}\n          winner={winner}\n          setWinner={setWinner}\n          scores={scores}\n          setScores={setScores}\n          history={history}\n          setHistory={setHistory}\n          renderSquare={renderSquare}\n        />\n      </div>\n      <div className=\"history-board\">\n        <HistoryBoard\n          historySquares={historySquares}\n          winner={winner}\n          history={history}\n          renderHistorySquare={renderHistorySquare}\n        />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\nfunction createHistory(history){\n  for (let i = 0; i < history.length; i++) {\n    <div id={i}>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][0])}\n        {props.renderHistorySquare(props.history[i][1])}\n        {props.renderHistorySquare(props.history[i][2])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][3])}\n        {props.renderHistorySquare(props.history[i][4])}\n        {props.renderHistorySquare(props.history[i][5])}\n      </div>\n      <div className=\"board-row\">\n        {props.renderHistorySquare(props.history[i][6])}\n        {props.renderHistorySquare(props.history[i][7])}\n        {props.renderHistorySquare(props.history[i][8])}\n      </div>\n    </div>\n\n  }\n}\nfunction HistoryBoard(props) {\n  if (props.history.length === 0) {\n    return <div>History</div>;\n  } else {\n    console.log(\"my history \" + props.history[0]);\n    return(\n    );\n  }\n}\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\nfunction historySquare(value) {\n  return <button className=\"square\">{value}</button>;\n}\n\nfunction Board(props) {\n  function declareTurn() {\n    return props.OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {props.scores[0]} - O : {props.scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {props.renderSquare(0)}\n          {props.renderSquare(1)}\n          {props.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(3)}\n          {props.renderSquare(4)}\n          {props.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {props.renderSquare(6)}\n          {props.renderSquare(7)}\n          {props.renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Game;\n\n/*import React, { useState, useContext, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction Square({ value, onClick }) {\n  return (\n    <button className=\"square\" onClick={onClick}>\n      {value}\n    </button>\n  );\n}\n\nfunction Board(props) {\n  const [arrInArr, setSquares] = useState(Array(9).fill(null));\n  const [OisNext, setOisNext] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const [scores, setScores] = useState([0, 0]);\n\n  function renderSquare(i) {\n    return (\n      <Square\n        value={arrInArr[i]}\n        onClick={() => {\n          if (winner === null) {\n            const nextSquares = arrInArr.slice();\n            if (nextSquares[i] === null) {\n              nextSquares[i] = OisNext ? \"X\" : \"O\";\n            } else {\n              return;\n            }\n            setSquares(nextSquares);\n            setOisNext(!OisNext);\n            console.log(arrInArr);\n          } else {\n            return;\n          }\n        }}\n      />\n    );\n  }\n  function calculateWinner(arrInArr) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        arrInArr[a] &&\n        arrInArr[a] === arrInArr[b] &&\n        arrInArr[a] === arrInArr[c]\n      ) {\n        console.log(\"WINNER!\");\n        setWinner(arrInArr[a]);\n      }\n    }\n    console.log(\"NO WINNER\");\n    return;\n  }\n\n  function declareTurn() {\n    return OisNext ? <p>Your turn X</p> : <p>Your turn O</p>;\n  }\n  useEffect(() => {\n    calculateWinner(arrInArr);\n    if (winner !== null) {\n      if (props.history.length === 0) {\n        props.setHistory(arrInArr);\n      } else {\n        props.setHistory(props.history + arrInArr);\n      }\n\n      console.log(\"HISTORY\" + props.history.length + props.history[0]);\n      let nextScores = scores.slice();\n      winner === \"X\" ? (nextScores[0] += 1) : (nextScores[1] += 1);\n      setScores(nextScores);\n      setWinner(null);\n      setSquares(Array(9).fill(null));\n    } else if (arrInArr.includes(null) === false) {\n      setSquares(Array(9).fill(null));\n      return;\n    }\n  });\n\n  return (\n    <div className=\"main-container\">\n      <div className=\"game-container\">\n        <div className=\"scores\">\n          <h1>Scores</h1>\n          <p>\n            X : {scores[0]} - O : {scores[1]}\n          </p>\n        </div>\n        <div className=\"status\">{declareTurn()} </div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction Game() {\n  const [history, setHistory] = useState([]);\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board history={history} setHistory={setHistory} />\n      </div>\n      <div className=\"game-info\">\n        <div />\n        <ol />\n      </div>\n    </div>\n  );\n}\n\nexport default Game;*/\n"]},"metadata":{},"sourceType":"module"}